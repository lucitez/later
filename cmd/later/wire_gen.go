// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"database/sql"
	"later"
	"later/pkg/auth"
	"later/pkg/repository"
	"later/pkg/server"
	"later/pkg/service"
	"later/pkg/transfer"
)

// Injectors from wire.go:

func InitializeContent(db *sql.DB) server.Content {
	domain := repository.NewDomain(db)
	serviceDomain := service.NewDomain(domain)
	content := repository.NewContent(db)
	serviceContent := service.NewContent(serviceDomain, content)
	serverContent := server.NewContent(serviceContent)
	return serverContent
}

func InitializeDomain(db *sql.DB) server.Domain {
	domain := repository.NewDomain(db)
	serviceDomain := service.NewDomain(domain)
	serverDomain := server.NewDomain(serviceDomain)
	return serverDomain
}

func InitializeFriend(db *sql.DB) server.Friend {
	user := repository.NewUser(db)
	serviceUser := service.NewUser(user)
	friend := repository.NewFriend(db)
	serviceFriend := service.NewFriend(serviceUser, friend)
	transferFriend := transfer.NewFriend(serviceUser)
	serverFriend := server.NewFriend(serviceFriend, transferFriend)
	return serverFriend
}

func InitializeFriendRequest(db *sql.DB) server.FriendRequest {
	friendRequest := repository.NewFriendRequest(db)
	user := repository.NewUser(db)
	serviceUser := service.NewUser(user)
	friend := repository.NewFriend(db)
	serviceFriend := service.NewFriend(serviceUser, friend)
	serviceFriendRequest := service.NewFriendRequest(friendRequest, serviceFriend, serviceUser)
	transferFriendRequest := transfer.NewFriendRequest(serviceUser)
	serverFriendRequest := server.NewFriendRequest(serviceFriendRequest, transferFriendRequest)
	return serverFriendRequest
}

func InitializeShare(db *sql.DB) server.ShareServer {
	share := repository.NewShare(db)
	userContent := repository.NewUserContent(db)
	serviceUserContent := service.NewUserContent(userContent)
	serviceShare := service.NewShare(share, serviceUserContent)
	domain := repository.NewDomain(db)
	serviceDomain := service.NewDomain(domain)
	content := repository.NewContent(db)
	serviceContent := service.NewContent(serviceDomain, content)
	user := repository.NewUser(db)
	serviceUser := service.NewUser(user)
	shareServer := server.NewShareServer(serviceShare, serviceContent, serviceUser)
	return shareServer
}

func InitializeUserContent(db *sql.DB) server.UserContent {
	userContent := repository.NewUserContent(db)
	serviceUserContent := service.NewUserContent(userContent)
	domain := repository.NewDomain(db)
	serviceDomain := service.NewDomain(domain)
	content := repository.NewContent(db)
	serviceContent := service.NewContent(serviceDomain, content)
	user := repository.NewUser(db)
	serviceUser := service.NewUser(user)
	transferUserContent := transfer.NewUserContent(serviceContent, serviceUser)
	serverUserContent := server.NewUserContent(serviceUserContent, transferUserContent)
	return serverUserContent
}

func InitializeUser(db *sql.DB) server.User {
	user := repository.NewUser(db)
	serviceUser := service.NewUser(user)
	friendRequest := repository.NewFriendRequest(db)
	friend := repository.NewFriend(db)
	serviceFriend := service.NewFriend(serviceUser, friend)
	serviceFriendRequest := service.NewFriendRequest(friendRequest, serviceFriend, serviceUser)
	domain := repository.NewDomain(db)
	serviceDomain := service.NewDomain(domain)
	content := repository.NewContent(db)
	serviceContent := service.NewContent(serviceDomain, content)
	transferUser := transfer.NewUser(serviceFriendRequest, serviceFriend, serviceContent)
	serverUser := server.NewUser(serviceUser, transferUser)
	return serverUser
}

func InitializeAuth(db *sql.DB) server.Auth {
	user := repository.NewUser(db)
	serviceUser := service.NewUser(user)
	repositoryAuth := repository.NewAuth(db)
	authService := auth.NewService(repositoryAuth, user)
	serverAuth := server.NewAuth(serviceUser, authService)
	return serverAuth
}

func InitializeServer(db *sql.DB) later.Server {
	repositoryAuth := repository.NewAuth(db)
	user := repository.NewUser(db)
	authService := auth.NewService(repositoryAuth, user)
	laterServer := later.NewServer(authService)
	return laterServer
}
